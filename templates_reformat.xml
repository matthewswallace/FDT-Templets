<?xml version="1.0" encoding="UTF-8" standalone="no"?><templates><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.mxml" deleted="false" description="Creates an accordion" enabled="true" id="com.powerflasher.fdt.ui.editor.template.accordion" name="Accordion">&lt;${m:mxml_component(Accordion)} &#13;
	width="${300}" &#13;
	height="${400}"&#13;
	&gt;&#13;
	${cursor}&#13;
&lt;/${m}&gt;</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.as3" deleted="false" description="Adds Bindable Metadata with event parameter." enabled="true" id="com.powerflasher.fdt.ui.editor.template.bindableWithEventMetadata" name="Bindable">[Bindable(event="${propertyChange}")]</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.as3" deleted="false" description="Adds Bindable Metadata." enabled="true" id="com.powerflasher.fdt.ui.editor.template.bindableMetadata" name="Bindable">[Bindable]</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.mxml" deleted="false" description="Creates a Box" enabled="true" id="com.powerflasher.fdt.ui.editor.template.box" name="Box">&lt;${m:mxml_component(Box)} &#13;
	direction="${vertical}"&#13;
	&gt;&#13;
	${cursor}&#13;
&lt;/${m}&gt;</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.mxml" deleted="false" description="Creates a new button" enabled="true" id="com.powerflasher.fdt.ui.editor.template.button" name="Button">&lt;${m:mxml_component(Button)} 
	label="${myButton}" 
	click="${onClick}(${event})" 
	/&gt;${cursor}
</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.mxml" deleted="false" description="Creates a Canvas" enabled="true" id="com.powerflasher.fdt.ui.editor.template.canvas" name="Canvas">&lt;${m:mxml_component(Canvas)} &#13;
	height="${200}" &#13;
	width="${100}"&#13;
	&gt;&#13;
	${cursor}&#13;
&lt;/${m}&gt;</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.mxml" deleted="false" description="Creates a new checkbox" enabled="true" id="com.powerflasher.fdt.ui.editor.template.checkbox" name="Checkbox">&lt;${m:mxml_component(CheckBox)} 
	id="${checkBoxId}" 
	label="${myCheckBox}" 
	/&gt;${cursor}
</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.as3" deleted="false" description="Creates an empty class without an package declaration" enabled="true" id="com.powerflasher.fdt.ui.editor.template.class" name="class">/**
 * @author ${user}
 */
class ${enclosing_type}
{
	${cursor}
}</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.mxml" deleted="false" description="Creates an new combobox" enabled="true" id="com.powerflasher.fdt.ui.editor.template.combobox" name="ComboBox">&lt;${m:mxml_component(ComboBox)} 
	id="${comboBoxId}"  
	dataProvider="${dataProvider}" 
	/&gt;${cursor}
</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.as3" deleted="false" description="Creates Constructor for a class" enabled="true" id="com.powerflasher.fdt.ui.editor.template.constructor" name="constructor">public function ${enclosing_type}() 
{
	${cursor}
}</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.mxml" deleted="false" description="Creates a new datagrid" enabled="true" id="com.powerflasher.fdt.ui.editor.template.datagrid" name="DataGrid">&lt;${m:mxml_component(DataGrid)} 
	id="${dataGridId}" 
	width="${width:value(400)}" 
	height="${height:value(300)}" 
	dataProvider="${dataProvider}" 
	&gt;
	&lt;${mx}:columns&gt;
		${cursor}
	&lt;/${mx}:columns&gt;
&lt;/${m}&gt;
</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.mxml" deleted="false" description="Creates a DataGridColumn" enabled="true" id="com.powerflasher.fdt.ui.editor.template.datagridcolumn" name="DataGridColumn">&lt;${m:mxml_component(DataGridColumn)} dataField="${dataField}" headerText="${headerText}"/&gt;${cursor}</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.mxml" deleted="false" description="Creates a date chooser" enabled="true" id="com.powerflasher.fdt.ui.editor.template.datechooser" name="DateChooser">&lt;${m:mxml_component(DateChooser)} 
	id="${dateChooserId}" 
	/&gt;${cursor}</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.as3" deleted="false" description="Setup the MonsterDebugger" enabled="true" name="debugger">import nl.demonsters.debugger.MonsterDebugger;
var debugger:MonsterDebugger = new MonsterDebugger(this);</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.as3" deleted="false" description="Adds Destroy Metadata (Parsley)." enabled="true" id="org.spicefactory.parsley.template.destroy" name="Destroy">[Destroy]</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.as3" deleted="false" description="do-while loop" enabled="true" id="com.powerflasher.fdt.ui.editor.template.do" name="do">do 
{
	${cursor}
} 
while 
(${condition});</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.as3" deleted="false" description="Adds Embed Metadata for file font." enabled="true" id="com.powerflasher.fdt.ui.editor.template.fontMetadata" name="Embed">[Embed(source="${source}", fontName="${fontName}", mimeType="application/x-font",
	advancedAntiAliasing="${aaa:value(true, false)}", fontWeight="${weight:value(normal, bold)}", fontStyle="${style:value(normal, italic)}",
	unicodeRange="${}")]
${specifier:value(private, public, protected)} var ${embeddedFontClass} : Class;</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.as3" deleted="false" description="Adds Embed Metadata for system font." enabled="true" id="com.powerflasher.fdt.ui.editor.template.fontMetadataSystem" name="Embed">[Embed(systemFont="${systemFontName}", fontName="${fontName}", mimeType="application/x-font",
	advancedAntiAliasing="${aaa:value(true, false)}", fontWeight="${weight:value(normal, bold)}", fontStyle="${style:value(normal, italic)}",
	unicodeRange="${}")]
${specifier:value(private, public, protected)} var ${embeddedFontClass} : Class;</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.as3" deleted="false" description="Adds Embed Metadata with mimeType parameter." enabled="true" id="com.powerflasher.fdt.ui.editor.template.embedMimeType" name="Embed">[Embed(source="${fileName}", mimeType="${}")]
${specifier:value(private, public, protected)} var ${embeddedClass} : Class;</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.as3" deleted="false" description="Adds Embed Metadata with symbol parameter." enabled="true" id="com.powerflasher.fdt.ui.editor.template.embedSymbol" name="Embed">[Embed(source="${fileName}", symbol="${symbolName}")]
${specifier:value(private, public, protected)} var ${embeddedClass} : Class;</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.as3" deleted="false" description="Adds Embed Metadata." enabled="true" id="com.powerflasher.fdt.ui.editor.template.embed" name="Embed">[Embed(source="${fileName}")]
${specifier:value(private, public, protected)} var ${embeddedClass} : Class;</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.as3" deleted="false" description="Enumerates all embedded fonts." enabled="true" id="com.powerflasher.fdt.ui.editor.template.enumerateFonts" name="enumerateFonts">var embeddedFonts : Array = Font.enumerateFonts(false);
embeddedFonts.sortOn("fontName", Array.CASEINSENSITIVE);
trace("\n----- Enumerate Fonts -----");
for(var i : int = 0;i &lt; embeddedFonts.length;i++) 
{
	trace(embeddedFonts[i].fontName);
}
trace("---------------------------\n");</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.as3" deleted="false" description="Adds Event Metadata." enabled="true" id="com.powerflasher.fdt.ui.editor.template.eventMetadata" name="Event">[Event(name="${eventName}", type="${event:value(flash.events.Event)}")]</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.as3" deleted="false" description="adds FDT_IGNORE block" enabled="true" id="com.powerflasher.fdt.ui.editor.template.fdtIgnore" name="fdtIgnore">/*FDT_IGNORE*/
${ignoredCode}${cursor}
/*FDT_IGNORE*/</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.as3" deleted="false" description="Iterator over keys of an array using enumeration" enabled="true" id="com.powerflasher.fdt.ui.editor.template.foren" name="fore">for (var ${index} : String in ${array}) 
{
	${cursor}
}</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.as3" deleted="false" description="Iterator over value of an array using enumeration" enabled="true" id="com.powerflasher.fdt.ui.editor.template.foreach" name="foreach">for each (var ${index} : ${type} in ${array}) 
{
	${cursor}
}</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.as3" deleted="false" description="Iterator over an array" enabled="true" id="com.powerflasher.fdt.ui.editor.template.forit" name="fori">for (var ${index} : int = 0; ${index} &lt; ${array}.length; ${index}++) 
{
	${cursor}
}</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.mxml" deleted="false" description="Creates a Form" enabled="true" id="com.powerflasher.fdt.ui.editor.template.form" name="Form">&lt;${m:mxml_component(Form)} &#13;
	width="${width:value(100)}" &#13;
	height="${height:value(100)}"&#13;
	&gt;&#13;
	&lt;${n:mxml_component(FormHeading)} &#13;
		label="${headerLabel}"&#13;
		/&gt;&#13;
	&lt;${o:mxml_component(FormItem)} &#13;
		label="${itemLabel}" &#13;
		required="${v:value(false, true)}"&#13;
		&gt;&#13;
		${cursor}&#13;
	&lt;/${o}&gt;&#13;
&lt;/${m}&gt;</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.mxml" deleted="false" description="Creates a FormItem" enabled="true" id="com.powerflasher.fdt.ui.editor.template.formitem" name="FormItem">&lt;${m:mxml_component(FormItem)} &#13;
	label="${itemLabel}" &#13;
	required="${v:value(false, true)}"&#13;
	&gt;&#13;
	${cursor}&#13;
&lt;/${m}&gt;</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.as3" deleted="false" description="creates a getter function" enabled="true" id="com.powerflasher.fdt.ui.editor.template.getter" name="getter">${specifier:value(public, protected, private)} function get ${name}() : ${Type} 
{
	return ${null}${cursor};
}</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.mxml" deleted="false" description="Creates a HBox" enabled="true" id="com.powerflasher.fdt.ui.editor.template.hbox" name="HBox">&lt;${m:mxml_component(HBox)} &gt;&#13;
	${cursor}&#13;
&lt;/${m}&gt;</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.mxml" deleted="false" description="Creates a horizontal slider" enabled="true" id="com.powerflasher.fdt.ui.editor.template.hslider" name="HSlider">&lt;${m:mxml_component(HSlider)} &#13;
	id="${hSliderId}" &#13;
	minimum="${min:value(0)}" &#13;
	maximum="${max:value(100)}" &#13;
	value="${value:value(100)}" &#13;
	change="${onSliderChange}(${event})"&#13;
	snapInterval="${snap:value(1)}" &#13;
	tickInterval="${tick:value(10)}"&#13;
	dataTipPlacement="${top}"&#13;
	 tickColor="${black}" &#13;
	 /&gt;${cursor}</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.mxml" deleted="false" description="Creates an HTTPService" enabled="true" id="com.powerflasher.fdt.ui.editor.template.httpservice" name="HttpService">&lt;${m:mxml_component(HTTPService)} 
	id="${feedRequest}" url="${url}" 
	fault="${onFault}(${fault:value(event)})" 
	result="${onResult}(${result:value(event)})" 
	resultFormat="${v:value(object,array,xml,e4x,flashvars,text)}" 
	showBusyCursor="${busy:value(true, false)}" 
	${cursor}/&gt;</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.as3" deleted="false" description="Creates an empty if-else block" enabled="true" id="com.powerflasher.fdt.ui.editor.template.ifel" name="ifel">if(${condition}) 
{
	${cursor}
} 
else 
{
	
}</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.mxml" deleted="false" description="Creates an Image" enabled="true" id="com.powerflasher.fdt.ui.editor.template.image" name="Image">&lt;${m:mxml_component(Image)} 
	source="${imageSource}"
	/&gt;${cursor}</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.as3" deleted="false" description="Adds Init Metadata (Parsley)." enabled="true" id="org.spicefactory.parsley.template.init" name="Init">[Init]</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.as3" deleted="false" description="Adds Inject Metadata (Parsley)." enabled="true" id="org.spicefactory.parsley.template.inject" name="Inject">[Inject]</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.as3" deleted="false" description="Adds Inject Metadata by id (Parsley)." enabled="true" id="org.spicefactory.parsley.template.injectById" name="Inject">[Inject(id="${cursor}")]</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.as3" deleted="false" description="Adds InjectConstructor Metadata by id (Parsley)." enabled="true" id="org.spicefactory.parsley.template.injectConstructor" name="InjectConstructor">[InjectConstructor]</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.as3" deleted="false" description="Creates an empty interface" enabled="true" id="com.powerflasher.fdt.ui.editor.template.interface" name="interface">/**
 * @author ${user}
 */
interface ${enclosing_type}
{
	${cursor}
}</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.as3" deleted="false" description="test type and cast" enabled="true" id="com.powerflasher.fdt.ui.editor.template.is" name="is">if (${name} is ${type}) 
{
	var ${newName} : ${type} = ${type}(${name});
	${cursor}
}</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.mxml" deleted="false" description="Creates a Label" enabled="true" id="com.powerflasher.fdt.ui.editor.template.label" name="Label">&lt;${m:mxml_component(Label)} 
	text="${myLabel}" 
	${cursor}/&gt;</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.as3" deleted="false" description="lazy create an instance" enabled="true" id="com.powerflasher.fdt.ui.editor.template.lazy" name="lazy">if (${name} == null) 
{
	${name} = new ${type}(${arguments});
	${cursor}
}</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.as3" deleted="false" description="creates stubs for UIComponent lifecycle methods" enabled="true" id="com.powerflasher.fdt.ui.editor.template.lifecyclemethods" name="lifecyclemethods">override protected function createChildren() : void 
{
	super.createChildren();
}

override public function invalidateProperties() : void 
{
	super.invalidateProperties();
}

override public function invalidateSize() : void 
{
	super.invalidateSize();
}

override public function invalidateDisplayList() : void 
{
	super.invalidateDisplayList();
}

override protected function commitProperties() : void 
{
	super.commitProperties();
}

override protected function measure() : void 
{
	super.measure();
}

override protected function updateDisplayList(unscaledWidth : Number, unscaledHeight : Number) : void 
{
	super.updateDisplayList(unscaledWidth, unscaledHeight);
}</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.mxml" deleted="false" description="Creates a vertical list" enabled="true" id="com.powerflasher.fdt.ui.editor.template.list" name="List"> &lt;${m:mxml_component(List)} 
 	width="${100}" 
 	height="${300}"
 	dataProvider="{${dataProvider}}" 
 	change="${onListSelectionChange}(${event})" 
 	${cursor}/&gt;</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.as3" deleted="false" description="Adds ManagedEvents Metadata (Parsley)." enabled="true" id="org.spicefactory.parsley.template.managedEvents" name="ManagedEvents">[ManagedEvents("${cursor}")]</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.as3" deleted="false" description="Adds MessageHandler Metadata (Parsley)." enabled="true" id="org.spicefactory.parsley.template.messageHandler" name="MessageHandler">[MessageHandler]</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.as3" deleted="false" description="Adds MessageHandler Metadata with selector (Parsley)." enabled="true" id="org.spicefactory.parsley.template.messageHandlerWithSelector" name="MessageHandler">[MessageHandler(selector="${cursor}")]</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.as3" deleted="false" description="Adds MessageInterceptor Metadata with type (Parsley)." enabled="true" id="org.spicefactory.parsley.template.messageInterceptor" name="MessageInterceptor">[MessageInterceptor(type="${cursor}")]</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.mxml" deleted="false" description="MXML Component" enabled="true" id="com.powerflasher.fdt.ui.editor.template.mxmlcomponent" name="mxmlComponent">&lt;${m:mxml_component}/&gt;&#13;</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.mxml" deleted="false" description="Creates a NumericStepper" enabled="true" id="com.powerflasher.fdt.ui.editor.template.numericstepper" name="NumericStepper">&lt;${m:mxml_component(NumericStepper)} &#13;	id="${numericStepperId}" &#13;	minimum="${10}" &#13;	maximum="${40}" &#13;	stepSize="${1}" &#13;	value="${20}" &#13;	/&gt;&#13;${cursor}</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.as3" deleted="false" description="Creates an empty package declaration" enabled="true" id="com.powerflasher.fdt.ui.editor.template.package" name="package">package ${enclosing_package} 
{
	${cursor}
}</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.mxml" deleted="false" description="Creates a Panel" enabled="true" id="com.powerflasher.fdt.ui.editor.template.panel" name="Panel">&lt;${m:mxml_component(Panel)} &#13;
	title="${myTitle}" &#13;
	height="${500}" &#13;
	width="${300}" &#13;
	&gt;&#13;
	${cursor}&#13;
&lt;/${m}&gt;</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.mxml" deleted="false" description="Creats a ProgressBar" enabled="true" id="com.powerflasher.fdt.ui.editor.template.progressbar" name="ProgressBar">&lt;${m:mxml_component(ProgressBar)} &#13;
	id="${progressBarId}" &#13;
	labelPlacement="${bottom}" &#13;
	minimum="${0}" &#13;
	maximum="${100}" &#13;
	label="{${currentProgress}} + '%'" &#13;
	/&gt;${cursor}</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.as3" deleted="false" description="override init contoller to kick things off" enabled="true" name="pure - facade initializeController">override protected function initializeController():void
{
	super.initializeController();
	this.registerCommand(AppNotifications.APP_INIT, AppInitCommand);
}
${cursor}</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.as3" deleted="false" description="overrides and proxy getter" enabled="true" name="pure - mediator setup">private function get proxy():${proxy_name}
{
	return facade.retrieveProxy(${proxy_name}.NAME) as ${proxy_name};
}
		
override public function listNotificationInterests():Array
{
	return [];
}
		
override public function handleNotification(notificaiton : INotification):void
{
			
}</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.as3" deleted="false" description="we override the execute command when created simplecommand." enabled="true" name="pure - simple command execute override">override public function execute(notification:${INotification}):void
{
	${cursor}
}</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.as3" deleted="false" description="mediator and proxy names" enabled="true" name="pure - static NAME">public static const NAME:String="${enclosing_type}";</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.as3" deleted="false" description="Template for the QuickTrace short cut." enabled="true" id="com.powerflasher.fdt.ui.editor.template.quicktrace" name="quicktrace">trace('${trace_it}: ' + (${trace_it}));</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.mxml" deleted="false" description="Creates a RadioButton" enabled="true" id="com.powerflasher.fdt.ui.editor.template.radiobutton" name="RadioButton">&lt;${m:mxml_component(RadioButton)} 
	id="${radioButtonId}" 
	groupName="${group}" 
	label="${myRadioButton}" 
	/&gt;${cursor}</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.mxml" deleted="false" description="Creates a RadioButtonGroup" enabled="true" id="com.powerflasher.fdt.ui.editor.template.radiobuttongroup" name="RadioButtonGroup">&lt;${m:mxml_component(RadioButtonGroup)} &#13;
	id="${radioButtonGroupId}" &#13;
	itemClick="${onRadioButtonClicked}(${event})"&#13;
	/&gt;&#13;
	&lt;${r:mxml_component(RadioButton)} &#13;
		id="${radioButtonId1}" &#13;
		groupName="${group}" &#13;
		label="${radioButton1}" &#13;
		/&gt;&#13;
	&lt;${r} &#13;
		id="${radioButtonId2}" &#13;
		groupName="${group}" &#13;
		label="${radioButton2}" &#13;
		/&gt;&#13;
&lt;${m}/&gt;${cursor}</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.as3" deleted="false" description="draws a rect within graphics object" enabled="true" id="com.powerflasher.fdt.ui.editor.template.rect" name="rect">graphics.beginFill(0x${ff0000}, ${1});
graphics.drawRect(${xPos:value(0)}, ${yPos:value(0)}, ${width:value(100)}, ${height:value(100)});
graphics.endFill();</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.as3" deleted="false" description="draws a rect within graphics object of a sprite" enabled="true" id="com.powerflasher.fdt.ui.editor.template.rectSprite" name="rectSprite">var ${s}:Sprite = new Sprite();
${s}.graphics.beginFill(0x${ff0000}, ${1});
${s}.graphics.drawRect(${xPos:value(0)}, ${yPos:value(0)}, ${width:value(100)}, ${height:value(100)});
${s}.graphics.endFill();
addChild(${s});
${cursor}</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.mxml" deleted="false" description="Creates a RemoteObject" enabled="true" id="com.powerflasher.fdt.ui.editor.template.remoteobject" name="RemoteObject">&lt;${m:mxml_component(RemoteObject)} &#13;
	id="${remoteObjectId}" &#13;
	destination="${destination}" &#13;
	fault="${onFault}(${event})"&#13;
	&gt;&#13;
	&lt;${mx}:method name="${method}"&gt;&#13;
		&lt;${mx}:arguments&gt;&#13;
        	${cursor}&#13;
        &lt;/${mx}:arguments&gt;&#13;
	&lt;/${mx}:method&gt;&#13;
&lt;/${m}&gt;</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.mxml" deleted="false" description="Creates an new Script/CDATA section" enabled="true" id="com.powerflasher.fdt.ui.editor.template.script" name="script">&lt;${m:mxml_component(Script)}&gt;
	&lt;![CDATA[
		${cursor}
	]]&gt;
&lt;/${m}&gt;</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.as3" deleted="false" description="creates a setter function" enabled="true" id="com.powerflasher.fdt.ui.editor.template.setter" name="setter">${specifier:value(public, protected, private)} function set ${name}(${value} : ${Type}) : void 
{
	${cursor}
}</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.as3" deleted="false" description="Adds Style Metadata." enabled="true" id="com.powerflasher.fdt.ui.editor.template.styleMetadata" name="Style">[Style(name="${styleName}")]</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.as3" deleted="false" description="Adds SWF Metadata." enabled="true" id="com.powerflasher.fdt.ui.editor.template.SWFMetadata" name="SWF">[SWF(backgroundColor="#${FFFFFF}", frameRate="${31}", width="${640}", height="${480}")]</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.as3" deleted="false" description="creates a switch block" enabled="true" id="com.powerflasher.fdt.ui.editor.template.switchBlock" name="switchBlock">switch(${expression})
{
	case ${result}:
		${cursor}
		break;
	default:
}</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.as3" deleted="false" description="trace current method" enabled="true" id="com.powerflasher.fdt.ui.editor.template.systrace" name="systrace">trace("${enclosing_type}.${enclosing_method}(${enclosing_method_arguments})");</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.mxml" deleted="false" description="Creates a TextArea" enabled="true" id="com.powerflasher.fdt.ui.editor.template.textarea" name="TextArea">&lt;${m:mxml_component(TextArea)} 
	id="${textAreaId}" 
	width="${400}" 
	height="${100}" 
	/&gt;${cursor}</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.mxml" deleted="false" description="Creates a Text control instance" enabled="true" id="com.powerflasher.fdt.ui.editor.template.textcontrol" name="TextControl">&lt;${m:mxml_component(Text)} 
	id="${textId}" 
	width="${100}" 
	/&gt;${cursor}</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.mxml" deleted="false" description="Creates a TextInput" enabled="true" id="com.powerflasher.fdt.ui.editor.template.textinput" name="TextInput">&lt;${m:mxml_component(TextInput)} 
	id="${textInputId}" 
	${cursor}/&gt;</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.as3" deleted="false" description="creates toString function" enabled="true" id="com.powerflasher.fdt.ui.editor.template.toString" name="toString">override public function toString() : String 
{
	return "${enclosing_package_and_type}";
}</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.as3" deleted="false" description="Trace a message to the MonsterDebugger" enabled="true" name="trace">MonsterDebugger.trace(this, "${cursor}");</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.as3" deleted="false" description="Trace a method and it's arguments to the MonsterDebugger" enabled="true" name="traceme">MonsterDebugger.trace(this, "${enclosing_type}.${enclosing_method}("+arguments+")");</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.as3" deleted="false" description="creates a try/catch block" enabled="true" id="com.powerflasher.fdt.ui.editor.template.tryCatch" name="tryCatch">try
{
	${cursor}	
}
catch(${error}:${Error})
{
	${cursor}	
}</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.as3" deleted="false" description="creates a try/catch/finally block" enabled="true" id="com.powerflasher.fdt.ui.editor.template.tryCatchFinally" name="tryCatchFinally">try
{
	${cursor}	
}
catch(${error}:${Error})
{
	
}
finally
{
	
}</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.mxml" deleted="false" description="Creates a VBox" enabled="true" id="com.powerflasher.fdt.ui.editor.template.vbox" name="VBox">&lt;${m:mxml_component(VBox)} &gt;&#13;
	${cursor}&#13;
&lt;/${m}&gt;</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.as3" deleted="false" description="creates local Vector instance with type." enabled="true" id="com.powerflasher.fdt.ui.editor.template.vector" name="vector">var ${name} : Vector.&lt;${type}&gt; = new Vector.&lt;${type}&gt;();</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.mxml" deleted="false" description="Creates a ViewStack" enabled="true" id="com.powerflasher.fdt.ui.editor.template.viewstack" name="ViewStack">&lt;${m:mxml_component(ViewStack)} &#13;
	id="${viewStackId}" &#13;
	width="${100}" &#13;
	height="${80}"&#13;
	&gt;&#13;
	${cursor}&#13;
&lt;/${m}&gt;</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.mxml" deleted="false" description="Creates a VSlider" enabled="true" id="com.powerflasher.fdt.ui.editor.template.vslider" name="VSlider">&lt;${m:mxml_component(VSlider)} &#13;
	id="${vSliderId}" &#13;
	minimum="${min:value(0)}" &#13;
	maximum="${max:value(100)}" &#13;
	value="${value:value(100)}" &#13;
	change="${onSliderChange}(${event})"&#13;
	snapInterval="${1}" tickInterval="${10}"&#13;
	dataTipPlacement="${top}" &#13;
	tickColor="${black}" /&#13;
	&gt;${cursor}</template><template autoinsert="true" context="com.powerflasher.fdt.ui.editor.template.mxml" deleted="false" description="Creates a WebService" enabled="true" id="com.powerflasher.fdt.ui.editor.template.webservice" name="WebService">&lt;${m:mxml_component(WebService)} &#13;
	id="${webServiceId}" &#13;
	wsdl="${wsdl}" &#13;
	useProxy="${v1:value(true, false)}" &#13;
	fault="${onFault}(${fault:value(event)})" &#13;
	result="${onResult}(${result:value(event)})" &gt;&#13;
	&lt;${mx}:operation name="${operation}" &#13;
		resultFormat="${v2:value(object,array,xml,e4x,flashvars,text)}"&gt;&#13;
		&lt;${mx}:arguments&gt;&#13;
			${cursor}&#13;
		&lt;/${mx}:arguments&gt;&#13;
	&lt;/${mx}:operation&gt;&#13;
&lt;/${m}&gt;</template></templates>